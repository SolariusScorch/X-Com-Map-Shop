RulesetConverter ver.1.0.1.0
2019 oct 22


RulesetConverter is a utility that converts data from an OxC ruleset file to a YAML configuration (template) file for MapViewII.

usage:
Input a .RUL file, specifying whether it is for UFO or TFTD. There is also a checkbox to add a Basepath to the output. A basepath is needed if your MapViewII Configurator's specified resource directory is not that of the MAPS, ROUTES, and TERRAIN folders from which tilesets are currently being configured. That is, you do not need to specify a basepath if you intend to configure MapView to use the basepath of the files that are being configured or if the tilesets are already in that basepath (hint: see MapViewII's Configurator on its Edit menu); on the other hand, if you want MapViewII to keep whatever basepath it already has, and don't want to copy the current tilesets to the appropriate folders of that basepath yourself, the tilesets therefore need a custom basepath (specified by the add Basepath option).

A basepath, by the way, is the parent directory of MAPS, ROUTES, and/or TERRAIN folders. MapViewII leverages that aspect of the standard XCOM folder-hierarchy.

This converter outputs tileset configuration metadata to a file "MapTilesets.tpl", which gets created in the converter's directory if and only if tilesets were found in the ruleset file that was used as input. The output-file is a valid "MapTilesets.*" file that could be copied or moved to MapViewII's /settings directory and used as-is (after renaming the extension to ".yml"). Which may or may not be fine depending on the resource directory(s) that you have set in MapView's Configurator, but then you'd need to overwrite your current "MapTilesets.yml" file (if you have one, and it's very likely you do since it gets created when MapViewII is installed on first run). So, I suggest getting your ducks in order and *copying* the tileset-data from the output (inside the .TPL file) to your already existing "MapTilesets.yml" file - with or without basepaths added, as explained above.

Or, if you know a bit about what you're doing, you can rename the MapTilesets files back & forth, and reset the Configurator's basepath properly ... blah blah. Note that MapViewII will require the stock XCOM cursor sprite (UFOGRAPH\CURSOR.PCK+TAB) in the Configurator's basepath regardless; and for McdView to be fully functional the SCANG.DAT and LOFTEMPS.DAT files also need to be found in the Configurator's basepath: SCANG.DAT needs to be in a GEODATA folder and LOFTEMPS.DAT needs to be in GEODATA for UFO or TERRAIN for TFTD (or so I've read, I don't have TFTD).

Note that tilesets are stored in OxC ruleset files under YAML-nodes labeled "terrains". Also note that MapViewII doesn't call tilesets terrains. It calls terrains terrains and tilesets tilesets*


- kevL

* terrains are what you get in XCom TERRAIN directories; tilesets are a MAP file + its RMP file + its allocated terrains.

/anyway
